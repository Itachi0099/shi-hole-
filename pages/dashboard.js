/**
 * Dashboard Page - Real-time Data Visualizations & 3D Elements
 */

class DashboardPage {
    constructor() {
        this.widgets = new Map();
        this.animations = new Map();
        this.realTimeData = {
            users: [],
            performance: [],
            traffic: [],
            sales: []
        };
        this.is3DEnabled = true;
        this.init();
    }
    
    init() {
        this.setupDashboardLayout();
        this.initializeWidgets();
        this.startRealTimeUpdates();
        this.setup3DElements();
        this.setupInteractions();
        this.initializeParticleSystem();
    }
    
    setupDashboardLayout() {
        // Create draggable widget system
        this.setupDragAndDrop();
        this.loadSavedLayout();
        this.setupResponsiveGrid();
    }
    
    setupDragAndDrop() {
        const widgets = document.querySelectorAll('.dashboard-widget');
        
        widgets.forEach(widget => {
            widget.draggable = true;
            widget.addEventListener('dragstart', (e) => this.handleDragStart(e));
            widget.addEventListener('dragend', (e) => this.handleDragEnd(e));
        });
        
        const dropZones = document.querySelectorAll('.widget-drop-zone');
        dropZones.forEach(zone => {
            zone.addEventListener('dragover', (e) => this.handleDragOver(e));
            zone.addEventListener('drop', (e) => this.handleDrop(e));
        });
    }
    
    handleDragStart(e) {
        e.dataTransfer.setData('text/plain', e.target.id);
        e.target.classList.add('dragging');
        
        // Add glow effect to drop zones
        document.querySelectorAll('.widget-drop-zone').forEach(zone => {
            zone.classList.add('drop-zone-active');
        });
    }
    
    handleDragEnd(e) {
        e.target.classList.remove('dragging');
        
        // Remove glow effect from drop zones
        document.querySelectorAll('.widget-drop-zone').forEach(zone => {
            zone.classList.remove('drop-zone-active');
        });
        
        this.saveLayout();
    }
    
    handleDragOver(e) {
        e.preventDefault();
        e.currentTarget.classList.add('drag-over');
    }
    
    handleDrop(e) {\n        e.preventDefault();\n        const widgetId = e.dataTransfer.getData('text/plain');\n        const widget = document.getElementById(widgetId);\n        const dropZone = e.currentTarget;\n        \n        // Animate widget to new position\n        this.animateWidgetMove(widget, dropZone);\n        \n        dropZone.classList.remove('drag-over');\n    }\n    \n    animateWidgetMove(widget, dropZone) {\n        const startRect = widget.getBoundingClientRect();\n        const endRect = dropZone.getBoundingClientRect();\n        \n        const deltaX = endRect.left - startRect.left;\n        const deltaY = endRect.top - startRect.top;\n        \n        widget.style.transform = `translate(${deltaX}px, ${deltaY}px) scale(0.8)`;\n        widget.style.transition = 'transform 0.3s ease';\n        \n        setTimeout(() => {\n            dropZone.appendChild(widget);\n            widget.style.transform = '';\n            widget.style.transition = '';\n        }, 300);\n    }\n    \n    saveLayout() {\n        const layout = {};\n        document.querySelectorAll('.dashboard-widget').forEach(widget => {\n            const parent = widget.parentElement;\n            layout[widget.id] = parent.id || parent.className;\n        });\n        \n        localStorage.setItem('dashboard-layout', JSON.stringify(layout));\n    }\n    \n    loadSavedLayout() {\n        const savedLayout = localStorage.getItem('dashboard-layout');\n        if (!savedLayout) return;\n        \n        try {\n            const layout = JSON.parse(savedLayout);\n            Object.entries(layout).forEach(([widgetId, parentId]) => {\n                const widget = document.getElementById(widgetId);\n                const parent = document.getElementById(parentId) || \n                              document.querySelector(`.${parentId}`);\n                              \n                if (widget && parent) {\n                    parent.appendChild(widget);\n                }\n            });\n        } catch (e) {\n            console.warn('Failed to load saved layout:', e);\n        }\n    }\n    \n    initializeWidgets() {\n        this.createAnalyticsChart();\n        this.createRevenueWidget();\n        this.createUserActivityFeed();\n        this.createPerformanceMetrics();\n        this.create3DGlobe();\n        this.createWeatherWidget();\n        this.createStockTicker();\n        this.createServerStatus();\n        this.createAIInsights();\n        this.createSocialMediaFeed();\n    }\n    \n    createAnalyticsChart() {\n        const widget = document.getElementById('analytics-chart-widget');\n        if (!widget) return;\n        \n        const canvas = document.createElement('canvas');\n        canvas.width = 400;\n        canvas.height = 250;\n        widget.appendChild(canvas);\n        \n        const ctx = canvas.getContext('2d');\n        \n        // Initialize chart data\n        const chartData = {\n            labels: [],\n            datasets: [\n                { name: 'Users', data: [], color: '#667eea' },\n                { name: 'Sessions', data: [], color: '#764ba2' },\n                { name: 'Revenue', data: [], color: '#f093fb' }\n            ]\n        };\n        \n        // Generate initial data\n        for (let i = 0; i < 24; i++) {\n            chartData.labels.push(i + ':00');\n            chartData.datasets[0].data.push(Math.random() * 1000 + 500);\n            chartData.datasets[1].data.push(Math.random() * 2000 + 1000);\n            chartData.datasets[2].data.push(Math.random() * 5000 + 2000);\n        }\n        \n        const drawChart = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            // Draw background grid\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n            ctx.lineWidth = 1;\n            \n            for (let i = 0; i <= 10; i++) {\n                const y = (canvas.height / 10) * i;\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(canvas.width, y);\n                ctx.stroke();\n            }\n            \n            // Draw data lines\n            chartData.datasets.forEach((dataset, datasetIndex) => {\n                ctx.strokeStyle = dataset.color;\n                ctx.lineWidth = 3;\n                ctx.beginPath();\n                \n                dataset.data.forEach((point, index) => {\n                    const x = (canvas.width / dataset.data.length) * index;\n                    const y = canvas.height - (point / 6000) * canvas.height;\n                    \n                    if (index === 0) {\n                        ctx.moveTo(x, y);\n                    } else {\n                        ctx.lineTo(x, y);\n                    }\n                });\n                \n                ctx.stroke();\n                \n                // Add glow effect\n                ctx.shadowColor = dataset.color;\n                ctx.shadowBlur = 10;\n                ctx.stroke();\n                ctx.shadowBlur = 0;\n            });\n        };\n        \n        // Store update function\n        this.widgets.set('analytics-chart', {\n            update: () => {\n                // Shift data and add new point\n                chartData.datasets.forEach(dataset => {\n                    dataset.data.push(Math.random() * 1000 + 500 + \n                                     (dataset.name === 'Revenue' ? 2000 : 0));\n                    if (dataset.data.length > 24) {\n                        dataset.data.shift();\n                    }\n                });\n                drawChart();\n            }\n        });\n        \n        drawChart();\n    }\n    \n    createRevenueWidget() {\n        const widget = document.getElementById('revenue-widget');\n        if (!widget) return;\n        \n        const currentRevenue = 125430;\n        const targetRevenue = 150000;\n        const growthRate = 12.5;\n        \n        const revenueDisplay = widget.querySelector('.revenue-amount');\n        const progressBar = widget.querySelector('.revenue-progress');\n        const growthDisplay = widget.querySelector('.growth-rate');\n        \n        // Animate revenue counter\n        this.animateNumber(revenueDisplay, 0, currentRevenue, 2000, '$');\n        \n        // Animate progress bar\n        const progress = (currentRevenue / targetRevenue) * 100;\n        setTimeout(() => {\n            progressBar.style.width = progress + '%';\n        }, 500);\n        \n        // Display growth rate\n        growthDisplay.textContent = `+${growthRate}%`;\n        growthDisplay.style.color = growthRate > 0 ? '#43e97b' : '#f5576c';\n        \n        // Store update function\n        this.widgets.set('revenue', {\n            update: () => {\n                const variation = (Math.random() - 0.5) * 5000;\n                const newRevenue = Math.max(0, currentRevenue + variation);\n                this.animateNumber(revenueDisplay, currentRevenue, newRevenue, 1000, '$');\n                \n                const newProgress = (newRevenue / targetRevenue) * 100;\n                progressBar.style.width = Math.min(100, newProgress) + '%';\n            }\n        });\n    }\n    \n    createUserActivityFeed() {\n        const widget = document.getElementById('user-activity-widget');\n        if (!widget) return;\n        \n        const activities = [\n            { user: 'John Doe', action: 'logged in', time: '2 min ago', type: 'login' },\n            { user: 'Jane Smith', action: 'made a purchase', time: '5 min ago', type: 'purchase' },\n            { user: 'Mike Johnson', action: 'updated profile', time: '8 min ago', type: 'update' },\n            { user: 'Sarah Wilson', action: 'shared content', time: '12 min ago', type: 'share' },\n            { user: 'Tom Brown', action: 'left a review', time: '15 min ago', type: 'review' }\n        ];\n        \n        const feedContainer = widget.querySelector('.activity-feed');\n        \n        const addActivity = (activity) => {\n            const activityEl = document.createElement('div');\n            activityEl.className = 'activity-item';\n            activityEl.innerHTML = `\n                <div class=\"activity-avatar\">\n                    <div class=\"avatar-placeholder\"></div>\n                </div>\n                <div class=\"activity-content\">\n                    <div class=\"activity-text\">\n                        <strong>${activity.user}</strong> ${activity.action}\n                    </div>\n                    <div class=\"activity-time\">${activity.time}</div>\n                </div>\n                <div class=\"activity-type ${activity.type}\"></div>\n            `;\n            \n            // Animate in\n            activityEl.style.opacity = '0';\n            activityEl.style.transform = 'translateX(-20px)';\n            feedContainer.insertBefore(activityEl, feedContainer.firstChild);\n            \n            requestAnimationFrame(() => {\n                activityEl.style.transition = 'all 0.3s ease';\n                activityEl.style.opacity = '1';\n                activityEl.style.transform = 'translateX(0)';\n            });\n            \n            // Remove oldest if too many\n            if (feedContainer.children.length > 5) {\n                const oldest = feedContainer.lastElementChild;\n                oldest.style.opacity = '0';\n                oldest.style.transform = 'translateX(20px)';\n                setTimeout(() => oldest.remove(), 300);\n            }\n        };\n        \n        // Initialize with existing activities\n        activities.forEach((activity, index) => {\n            setTimeout(() => addActivity(activity), index * 200);\n        });\n        \n        // Store update function\n        this.widgets.set('user-activity', {\n            update: () => {\n                const newActivities = [\n                    { user: 'Alex Chen', action: 'started a session', time: 'just now', type: 'login' },\n                    { user: 'Lisa Park', action: 'completed a task', time: 'just now', type: 'update' },\n                    { user: 'David Kim', action: 'made a comment', time: 'just now', type: 'share' }\n                ];\n                \n                const randomActivity = newActivities[Math.floor(Math.random() * newActivities.length)];\n                addActivity(randomActivity);\n            }\n        });\n    }\n    \n    createPerformanceMetrics() {\n        const widget = document.getElementById('performance-metrics-widget');\n        if (!widget) return;\n        \n        const metrics = [\n            { name: 'CPU Usage', value: 45, unit: '%', color: '#667eea' },\n            { name: 'Memory', value: 72, unit: '%', color: '#764ba2' },\n            { name: 'Disk I/O', value: 28, unit: '%', color: '#f093fb' },\n            { name: 'Network', value: 91, unit: '%', color: '#43e97b' }\n        ];\n        \n        const metricsContainer = widget.querySelector('.metrics-grid');\n        \n        metrics.forEach((metric, index) => {\n            const metricEl = document.createElement('div');\n            metricEl.className = 'metric-item';\n            metricEl.innerHTML = `\n                <div class=\"metric-header\">\n                    <h4>${metric.name}</h4>\n                    <span class=\"metric-value\">0${metric.unit}</span>\n                </div>\n                <div class=\"metric-bar\">\n                    <div class=\"metric-progress\" style=\"background: ${metric.color}\"></div>\n                </div>\n            `;\n            \n            metricsContainer.appendChild(metricEl);\n            \n            const valueEl = metricEl.querySelector('.metric-value');\n            const progressBar = metricEl.querySelector('.metric-progress');\n            \n            // Animate metrics\n            setTimeout(() => {\n                this.animateNumber(valueEl, 0, metric.value, 1500, '', metric.unit);\n                progressBar.style.width = metric.value + '%';\n            }, index * 200);\n        });\n        \n        // Store update function\n        this.widgets.set('performance-metrics', {\n            update: () => {\n                metrics.forEach((metric, index) => {\n                    const variation = (Math.random() - 0.5) * 20;\n                    const newValue = Math.max(0, Math.min(100, metric.value + variation));\n                    metric.value = newValue;\n                    \n                    const metricEl = metricsContainer.children[index];\n                    const valueEl = metricEl.querySelector('.metric-value');\n                    const progressBar = metricEl.querySelector('.metric-progress');\n                    \n                    valueEl.textContent = Math.floor(newValue) + metric.unit;\n                    progressBar.style.width = newValue + '%';\n                });\n            }\n        });\n    }\n    \n    create3DGlobe() {\n        const widget = document.getElementById('globe-widget');\n        if (!widget) return;\n        \n        const canvas = document.createElement('canvas');\n        canvas.width = 300;\n        canvas.height = 300;\n        widget.appendChild(canvas);\n        \n        const ctx = canvas.getContext('2d');\n        \n        let rotation = 0;\n        const radius = 120;\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        \n        // Sample data points (cities)\n        const cities = [\n            { name: 'New York', lat: 40.7128, lng: -74.0060, activity: 85 },\n            { name: 'London', lat: 51.5074, lng: -0.1278, activity: 72 },\n            { name: 'Tokyo', lat: 35.6762, lng: 139.6503, activity: 95 },\n            { name: 'Sydney', lat: -33.8688, lng: 151.2093, activity: 68 },\n            { name: 'São Paulo', lat: -23.5558, lng: -46.6396, activity: 77 }\n        ];\n        \n        const project3D = (lat, lng, rotation) => {\n            const phi = (lat * Math.PI) / 180;\n            const theta = ((lng + rotation) * Math.PI) / 180;\n            \n            const x = radius * Math.cos(phi) * Math.cos(theta);\n            const y = radius * Math.sin(phi);\n            const z = radius * Math.cos(phi) * Math.sin(theta);\n            \n            return {\n                x: centerX + x,\n                y: centerY - y,\n                z: z,\n                visible: z > 0\n            };\n        };\n        \n        const drawGlobe = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            // Draw globe outline\n            ctx.beginPath();\n            ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n            ctx.strokeStyle = 'rgba(102, 126, 234, 0.3)';\n            ctx.lineWidth = 2;\n            ctx.stroke();\n            \n            // Draw grid lines\n            ctx.strokeStyle = 'rgba(102, 126, 234, 0.1)';\n            ctx.lineWidth = 1;\n            \n            // Latitude lines\n            for (let lat = -60; lat <= 60; lat += 30) {\n                ctx.beginPath();\n                for (let lng = -180; lng <= 180; lng += 5) {\n                    const point = project3D(lat, lng, rotation);\n                    if (point.visible) {\n                        if (lng === -180) {\n                            ctx.moveTo(point.x, point.y);\n                        } else {\n                            ctx.lineTo(point.x, point.y);\n                        }\n                    }\n                }\n                ctx.stroke();\n            }\n            \n            // Longitude lines\n            for (let lng = -180; lng <= 180; lng += 30) {\n                ctx.beginPath();\n                for (let lat = -90; lat <= 90; lat += 5) {\n                    const point = project3D(lat, lng, rotation);\n                    if (point.visible) {\n                        if (lat === -90) {\n                            ctx.moveTo(point.x, point.y);\n                        } else {\n                            ctx.lineTo(point.x, point.y);\n                        }\n                    }\n                }\n                ctx.stroke();\n            }\n            \n            // Draw cities\n            cities.forEach(city => {\n                const point = project3D(city.lat, city.lng, rotation);\n                if (point.visible) {\n                    const intensity = city.activity / 100;\n                    \n                    // Draw pulse effect\n                    ctx.beginPath();\n                    ctx.arc(point.x, point.y, 3 + Math.sin(Date.now() * 0.01) * 2, 0, 2 * Math.PI);\n                    ctx.fillStyle = `rgba(255, 119, 198, ${intensity})`;\n                    ctx.fill();\n                    \n                    // Draw city name\n                    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                    ctx.font = '12px Inter';\n                    ctx.fillText(city.name, point.x + 8, point.y - 8);\n                }\n            });\n            \n            rotation += 0.5;\n        };\n        \n        // Animation loop\n        const animate = () => {\n            drawGlobe();\n            requestAnimationFrame(animate);\n        };\n        \n        animate();\n        \n        this.widgets.set('globe', {\n            update: () => {\n                // Update city activities\n                cities.forEach(city => {\n                    city.activity = Math.max(0, Math.min(100, \n                        city.activity + (Math.random() - 0.5) * 10));\n                });\n            }\n        });\n    }\n    \n    createWeatherWidget() {\n        const widget = document.getElementById('weather-widget');\n        if (!widget) return;\n        \n        const weatherData = {\n            location: 'San Francisco',\n            temperature: 22,\n            condition: 'Partly Cloudy',\n            humidity: 65,\n            windSpeed: 12,\n            icon: '⛅'\n        };\n        \n        const updateWeather = () => {\n            widget.innerHTML = `\n                <div class=\"weather-header\">\n                    <h3>${weatherData.location}</h3>\n                    <div class=\"weather-icon\">${weatherData.icon}</div>\n                </div>\n                <div class=\"weather-temp\">${weatherData.temperature}°C</div>\n                <div class=\"weather-condition\">${weatherData.condition}</div>\n                <div class=\"weather-details\">\n                    <div class=\"detail-item\">\n                        <span>Humidity</span>\n                        <span>${weatherData.humidity}%</span>\n                    </div>\n                    <div class=\"detail-item\">\n                        <span>Wind</span>\n                        <span>${weatherData.windSpeed} km/h</span>\n                    </div>\n                </div>\n            `;\n        };\n        \n        updateWeather();\n        \n        this.widgets.set('weather', {\n            update: () => {\n                weatherData.temperature += (Math.random() - 0.5) * 2;\n                weatherData.humidity += (Math.random() - 0.5) * 5;\n                weatherData.windSpeed += (Math.random() - 0.5) * 3;\n                \n                weatherData.temperature = Math.max(-10, Math.min(40, weatherData.temperature));\n                weatherData.humidity = Math.max(0, Math.min(100, weatherData.humidity));\n                weatherData.windSpeed = Math.max(0, Math.min(50, weatherData.windSpeed));\n                \n                updateWeather();\n            }\n        });\n    }\n    \n    createStockTicker() {\n        const widget = document.getElementById('stock-ticker-widget');\n        if (!widget) return;\n        \n        const stocks = [\n            { symbol: 'AAPL', price: 150.25, change: 2.34, changePercent: 1.58 },\n            { symbol: 'GOOGL', price: 2420.80, change: -15.60, changePercent: -0.64 },\n            { symbol: 'MSFT', price: 310.15, change: 5.45, changePercent: 1.79 },\n            { symbol: 'TSLA', price: 825.50, change: 18.75, changePercent: 2.32 }\n        ];\n        \n        const tickerContainer = widget.querySelector('.stock-ticker');\n        \n        const updateStocks = () => {\n            tickerContainer.innerHTML = '';\n            \n            stocks.forEach(stock => {\n                const stockEl = document.createElement('div');\n                stockEl.className = 'stock-item';\n                \n                const isPositive = stock.change >= 0;\n                const changeClass = isPositive ? 'positive' : 'negative';\n                const changeSymbol = isPositive ? '+' : '';\n                \n                stockEl.innerHTML = `\n                    <div class=\"stock-symbol\">${stock.symbol}</div>\n                    <div class=\"stock-price\">$${stock.price.toFixed(2)}</div>\n                    <div class=\"stock-change ${changeClass}\">\n                        ${changeSymbol}${stock.change.toFixed(2)}\n                        (${changeSymbol}${stock.changePercent.toFixed(2)}%)\n                    </div>\n                `;\n                \n                tickerContainer.appendChild(stockEl);\n            });\n        };\n        \n        updateStocks();\n        \n        this.widgets.set('stock-ticker', {\n            update: () => {\n                stocks.forEach(stock => {\n                    const changeAmount = (Math.random() - 0.5) * 10;\n                    stock.price += changeAmount;\n                    stock.change = changeAmount;\n                    stock.changePercent = (changeAmount / stock.price) * 100;\n                    \n                    stock.price = Math.max(1, stock.price);\n                });\n                \n                updateStocks();\n            }\n        });\n    }\n    \n    createServerStatus() {\n        const widget = document.getElementById('server-status-widget');\n        if (!widget) return;\n        \n        const servers = [\n            { name: 'Web Server 1', status: 'online', load: 45, uptime: '99.9%' },\n            { name: 'Database Server', status: 'online', load: 72, uptime: '99.8%' },\n            { name: 'API Gateway', status: 'online', load: 38, uptime: '99.9%' },\n            { name: 'Cache Server', status: 'maintenance', load: 15, uptime: '98.7%' }\n        ];\n        \n        const updateServerStatus = () => {\n            const statusContainer = widget.querySelector('.server-list');\n            statusContainer.innerHTML = '';\n            \n            servers.forEach(server => {\n                const serverEl = document.createElement('div');\n                serverEl.className = 'server-item';\n                \n                const statusColor = {\n                    online: '#43e97b',\n                    offline: '#f5576c',\n                    maintenance: '#fbbf24'\n                };\n                \n                serverEl.innerHTML = `\n                    <div class=\"server-info\">\n                        <div class=\"server-name\">${server.name}</div>\n                        <div class=\"server-status\" style=\"color: ${statusColor[server.status]}\">\n                            ${server.status.toUpperCase()}\n                        </div>\n                    </div>\n                    <div class=\"server-metrics\">\n                        <div class=\"load-bar\">\n                            <div class=\"load-progress\" style=\"width: ${server.load}%; background: ${statusColor[server.status]}\"></div>\n                        </div>\n                        <div class=\"uptime\">Uptime: ${server.uptime}</div>\n                    </div>\n                `;\n                \n                statusContainer.appendChild(serverEl);\n            });\n        };\n        \n        updateServerStatus();\n        \n        this.widgets.set('server-status', {\n            update: () => {\n                servers.forEach(server => {\n                    if (server.status === 'online') {\n                        server.load += (Math.random() - 0.5) * 10;\n                        server.load = Math.max(0, Math.min(100, server.load));\n                    }\n                });\n                \n                updateServerStatus();\n            }\n        });\n    }\n    \n    createAIInsights() {\n        const widget = document.getElementById('ai-insights-widget');\n        if (!widget) return;\n        \n        const insights = [\n            'User engagement increased by 15% this week',\n            'Peak traffic occurs at 2 PM PST',\n            'Mobile users represent 68% of total traffic',\n            'Conversion rate improved by 3.2%',\n            'Average session duration: 4m 32s'\n        ];\n        \n        let currentInsight = 0;\n        \n        const showInsight = () => {\n            const insightEl = widget.querySelector('.ai-insight');\n            insightEl.style.opacity = '0';\n            \n            setTimeout(() => {\n                insightEl.textContent = insights[currentInsight];\n                insightEl.style.opacity = '1';\n                currentInsight = (currentInsight + 1) % insights.length;\n            }, 300);\n        };\n        \n        showInsight();\n        \n        this.widgets.set('ai-insights', {\n            update: showInsight\n        });\n    }\n    \n    createSocialMediaFeed() {\n        const widget = document.getElementById('social-feed-widget');\n        if (!widget) return;\n        \n        const posts = [\n            { platform: 'Twitter', content: 'Just launched our new AI feature! 🚀', likes: 245, shares: 18 },\n            { platform: 'LinkedIn', content: 'Celebrating 10K users milestone!', likes: 189, shares: 32 },\n            { platform: 'Instagram', content: 'Behind the scenes at NeoTech HQ', likes: 567, shares: 45 }\n        ];\n        \n        const updateFeed = () => {\n            const feedContainer = widget.querySelector('.social-posts');\n            feedContainer.innerHTML = '';\n            \n            posts.forEach(post => {\n                const postEl = document.createElement('div');\n                postEl.className = 'social-post';\n                postEl.innerHTML = `\n                    <div class=\"post-header\">\n                        <span class=\"platform\">${post.platform}</span>\n                        <span class=\"post-time\">2h ago</span>\n                    </div>\n                    <div class=\"post-content\">${post.content}</div>\n                    <div class=\"post-metrics\">\n                        <span>❤️ ${post.likes}</span>\n                        <span>🔄 ${post.shares}</span>\n                    </div>\n                `;\n                feedContainer.appendChild(postEl);\n            });\n        };\n        \n        updateFeed();\n        \n        this.widgets.set('social-feed', {\n            update: () => {\n                posts.forEach(post => {\n                    post.likes += Math.floor(Math.random() * 5);\n                    post.shares += Math.floor(Math.random() * 2);\n                });\n                updateFeed();\n            }\n        });\n    }\n    \n    startRealTimeUpdates() {\n        // Update widgets every 5 seconds\n        setInterval(() => {\n            this.widgets.forEach((widget, name) => {\n                if (widget.update) {\n                    widget.update();\n                }\n            });\n        }, 5000);\n        \n        // AI Insights update every 10 seconds\n        setInterval(() => {\n            const aiWidget = this.widgets.get('ai-insights');\n            if (aiWidget && aiWidget.update) {\n                aiWidget.update();\n            }\n        }, 10000);\n    }\n    \n    setupInteractions() {\n        // Widget resize handles\n        this.setupWidgetResize();\n        \n        // Fullscreen toggle\n        this.setupFullscreenToggle();\n        \n        // Widget settings\n        this.setupWidgetSettings();\n    }\n    \n    setupWidgetResize() {\n        const resizeHandles = document.querySelectorAll('.widget-resize-handle');\n        \n        resizeHandles.forEach(handle => {\n            handle.addEventListener('mousedown', (e) => {\n                const widget = handle.closest('.dashboard-widget');\n                const startX = e.clientX;\n                const startY = e.clientY;\n                const startWidth = widget.offsetWidth;\n                const startHeight = widget.offsetHeight;\n                \n                const handleMouseMove = (e) => {\n                    const newWidth = startWidth + (e.clientX - startX);\n                    const newHeight = startHeight + (e.clientY - startY);\n                    \n                    widget.style.width = Math.max(200, newWidth) + 'px';\n                    widget.style.height = Math.max(150, newHeight) + 'px';\n                };\n                \n                const handleMouseUp = () => {\n                    document.removeEventListener('mousemove', handleMouseMove);\n                    document.removeEventListener('mouseup', handleMouseUp);\n                    this.saveLayout();\n                };\n                \n                document.addEventListener('mousemove', handleMouseMove);\n                document.addEventListener('mouseup', handleMouseUp);\n                \n                e.preventDefault();\n            });\n        });\n    }\n    \n    setupFullscreenToggle() {\n        const fullscreenBtns = document.querySelectorAll('.widget-fullscreen');\n        \n        fullscreenBtns.forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const widget = btn.closest('.dashboard-widget');\n                \n                if (widget.classList.contains('fullscreen')) {\n                    widget.classList.remove('fullscreen');\n                    btn.innerHTML = '⛶';\n                } else {\n                    widget.classList.add('fullscreen');\n                    btn.innerHTML = '⛉';\n                }\n                \n                e.stopPropagation();\n            });\n        });\n    }\n    \n    setup3DElements() {\n        if (!this.is3DEnabled) return;\n        \n        // Add 3D transforms to widgets\n        const widgets = document.querySelectorAll('.dashboard-widget');\n        \n        widgets.forEach(widget => {\n            widget.addEventListener('mousemove', (e) => {\n                const rect = widget.getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n                \n                const centerX = rect.width / 2;\n                const centerY = rect.height / 2;\n                \n                const rotateX = (y - centerY) / centerY * -10;\n                const rotateY = (x - centerX) / centerX * 10;\n                \n                widget.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) translateZ(0)`;\n            });\n            \n            widget.addEventListener('mouseleave', () => {\n                widget.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) translateZ(0)';\n            });\n        });\n    }\n    \n    initializeParticleSystem() {\n        const canvas = document.createElement('canvas');\n        canvas.id = 'dashboard-particles';\n        canvas.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            z-index: -1;\n            opacity: 0.3;\n        `;\n        \n        document.body.appendChild(canvas);\n        \n        const ctx = canvas.getContext('2d');\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        \n        const particles = [];\n        const particleCount = 30;\n        \n        // Initialize particles\n        for (let i = 0; i < particleCount; i++) {\n            particles.push({\n                x: Math.random() * canvas.width,\n                y: Math.random() * canvas.height,\n                vx: (Math.random() - 0.5) * 2,\n                vy: (Math.random() - 0.5) * 2,\n                size: Math.random() * 3 + 1,\n                opacity: Math.random() * 0.5 + 0.2,\n                hue: Math.random() * 60 + 200\n            });\n        }\n        \n        const animateParticles = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            particles.forEach(particle => {\n                // Update position\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                \n                // Bounce off edges\n                if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;\n                if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;\n                \n                // Draw particle\n                ctx.beginPath();\n                ctx.arc(particle.x, particle.y, particle.size, 0, 2 * Math.PI);\n                ctx.fillStyle = `hsla(${particle.hue}, 70%, 60%, ${particle.opacity})`;\n                ctx.fill();\n            });\n            \n            requestAnimationFrame(animateParticles);\n        };\n        \n        animateParticles();\n        \n        // Handle window resize\n        window.addEventListener('resize', () => {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        });\n    }\n    \n    animateNumber(element, start, end, duration, prefix = '', suffix = '') {\n        const range = end - start;\n        const increment = range / (duration / 16);\n        let current = start;\n        \n        const timer = setInterval(() => {\n            current += increment;\n            if ((increment > 0 && current >= end) || (increment < 0 && current <= end)) {\n                current = end;\n                clearInterval(timer);\n            }\n            \n            element.textContent = prefix + Math.floor(current).toLocaleString() + suffix;\n        }, 16);\n    }\n    \n    setupResponsiveGrid() {\n        const dashboard = document.querySelector('.dashboard-grid');\n        if (!dashboard) return;\n        \n        const observer = new ResizeObserver(() => {\n            const width = dashboard.offsetWidth;\n            const columns = Math.floor(width / 320);\n            dashboard.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;\n        });\n        \n        observer.observe(dashboard);\n    }\n}\n\n// Export for use in router\nwindow.DashboardPage = DashboardPage;"}